<?php
require_once __DIR__ . '/../init.php';
require_once __DIR__ . '/Database.php';
require_once __DIR__ . '/CustomSessionHandler.php';

class Votes {
    private $db;
    private $session;

    public function __construct() {
        $this->db = Database::getInstance();
        $this->session = CustomSessionHandler::getInstance();
    }

    /**
     * Check if a voter has already voted
     * @param int $voter_id The voter's ID
     * @return bool True if voter has voted, false otherwise
     */
    public function hasVoted($voter_id) {
        try {
            $stmt = $this->db->prepare("
                SELECT has_voted FROM voters 
                WHERE id = ?
            ");
            $stmt->bind_param("i", $voter_id);
            $stmt->execute();
            $result = $stmt->get_result();
            $voter = $result->fetch_assoc();
            return $voter && $voter['has_voted'] == 1;
        } catch (Exception $e) {
            error_log("Error checking vote status: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Submit votes for a voter
     * @param int $voter_id The voter's ID
     * @param array $votes_data Array of position_id => candidate_id pairs
     * @param int $election_id The election's ID
     * @return array Status array with success, vote_ref, and message
     */
    public function submitVotes($voter_id, $votes_data, $election_id) {
        try {
            // Start transaction if not already started
            if (!$this->db->getConnection()->begin_transaction()) {
                throw new Exception("Could not start transaction");
            }

            // Insert vote record - vote_ref will be generated by trigger
            $stmt = $this->db->prepare("
                INSERT INTO votes (election_id, votes_data) 
                VALUES (?, ?)
            ");
            $votes_json = json_encode($votes_data);
            $stmt->bind_param("is", $election_id, $votes_json);
            
            if (!$stmt->execute()) {
                throw new Exception("Failed to save vote data");
            }

            // Get the generated vote reference
            $sql = "SELECT vote_ref FROM votes WHERE id = LAST_INSERT_ID()";
            $result = $this->db->query($sql);
            $vote = $result->fetch_assoc();

            if (!$vote) {
                throw new Exception("Failed to retrieve vote reference");
            }

            // Increment vote count for each selected candidate
            foreach ($votes_data as $position_id => $candidate_id) {
                // Handle both single votes and multiple votes
                $candidate_ids = is_array($candidate_id) ? $candidate_id : [$candidate_id];
                
                foreach ($candidate_ids as $cid) {
                    $stmt = $this->db->prepare("
                        UPDATE candidates 
                        SET votes = votes + 1 
                        WHERE id = ? AND position_id = ?
                    ");
                    $stmt->bind_param("ii", $cid, $position_id);
                    
                    if (!$stmt->execute()) {
                        throw new Exception("Failed to update candidate vote count");
                    }
                }
            }

            // Mark voter as voted
            $stmt = $this->db->prepare("
                UPDATE voters SET has_voted = 1 
                WHERE id = ?
            ");
            $stmt->bind_param("i", $voter_id);
            
            if (!$stmt->execute()) {
                throw new Exception("Failed to update voter status");
            }

            return [
                'success' => true,
                'vote_ref' => $vote['vote_ref'],
                'message' => 'Vote submitted successfully'
            ];

        } catch (Exception $e) {
            // Rollback will be handled by caller
            error_log("Error submitting vote: " . $e->getMessage());
            return [
                'success' => false,
                'message' => 'Failed to submit vote: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Get votes cast by a voter
     * @param int $voter_id The voter's ID
     * @return array|false Array of votes with position and candidate details, or false if not found
     */
    public function getVoterVotes($voter_id) {
        if (!$this->hasVoted($voter_id)) {
            return false;
        }
        
        try {
            $sql = "SELECT v.* FROM votes v 
                    JOIN voters vt ON v.created_at = (
                        SELECT MAX(created_at) FROM votes 
                        WHERE created_at <= (
                            SELECT created_at FROM voters 
                            WHERE id = ? AND has_voted = 1
                        )
                    )
                    WHERE vt.id = ? AND vt.has_voted = 1
                    LIMIT 1";
            
            $stmt = $this->db->prepare($sql);
            $stmt->bind_param('ii', $voter_id, $voter_id);
            $stmt->execute();
            $result = $stmt->get_result()->fetch_assoc();
            
            if (!$result) {
                return false;
            }
            
            $votesData = json_decode($result['votes_data'], true);
            $formattedVotes = [];
            
            foreach ($votesData as $positionId => $candidateIds) {
                $positionSql = "SELECT description FROM positions WHERE id = ?";
                $posStmt = $this->db->prepare($positionSql);
                $posStmt->bind_param('i', $positionId);
                $posStmt->execute();
                $position = $posStmt->get_result()->fetch_assoc();
                
                if (!is_array($candidateIds)) {
                    $candidateIds = [$candidateIds];
                }
                
                foreach ($candidateIds as $candidateId) {
                    $candidateSql = "SELECT c.firstname, c.lastname, p.name as partylist 
                                   FROM candidates c 
                                   LEFT JOIN partylists p ON c.partylist_id = p.id 
                                   WHERE c.id = ?";
                    $candStmt = $this->db->prepare($candidateSql);
                    $candStmt->bind_param('i', $candidateId);
                    $candStmt->execute();
                    $candidate = $candStmt->get_result()->fetch_assoc();
                    
                    if ($candidate) {
                        $formattedVotes[] = [
                            'position' => $position['description'],
                            'candidate' => $candidate['firstname'] . ' ' . $candidate['lastname'],
                            'partylist' => $candidate['partylist']
                        ];
                    }
                }
            }
            
            return $formattedVotes;
        } catch (Exception $e) {
            error_log("Error getting voter votes: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Get vote counts for all candidates in a position
     * @param int $position_id Position ID
     * @return array Array of candidates with their vote counts
     */
    public function getPositionVoteCounts($position_id) {
        try {
            $sql = "SELECT c.*, p.name as partylist_name 
                    FROM candidates c 
                    LEFT JOIN partylists p ON c.partylist_id = p.id 
                    WHERE c.position_id = ? 
                    ORDER BY c.votes DESC";
            
            $stmt = $this->db->prepare($sql);
            $stmt->bind_param("i", $position_id);
            $stmt->execute();
            return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
        } catch (Exception $e) {
            error_log("Error getting vote counts: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Get total votes cast in the election
     * @return int Total number of votes
     */
    public function getTotalVotes() {
        try {
            $sql = "SELECT COUNT(*) as total FROM votes";
            $result = $this->db->query($sql);
            $row = $result->fetch_assoc();
            return $row['total'];
        } catch (Exception $e) {
            error_log("Error getting total votes: " . $e->getMessage());
            return 0;
        }
    }

    public function getVoteRef($voterId) {
        try {
            $sql = "SELECT v.vote_ref FROM votes v 
                    JOIN voters vt ON v.created_at = (
                        SELECT MAX(created_at) FROM votes 
                        WHERE created_at <= (
                            SELECT created_at FROM voters 
                            WHERE id = ? AND has_voted = 1
                        )
                    )
                    WHERE vt.id = ? AND vt.has_voted = 1
                    LIMIT 1";
            
            $stmt = $this->db->prepare($sql);
            $stmt->bind_param('ii', $voterId, $voterId);
            $stmt->execute();
            $result = $stmt->get_result();
            
            if ($row = $result->fetch_assoc()) {
                return $row['vote_ref'];
            }
            
            return null;
        } catch (Exception $e) {
            error_log("Error getting vote reference: " . $e->getMessage());
            return null;
        }
    }
}